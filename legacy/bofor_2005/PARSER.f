      SUBROUTINE PARSER (SCANS)
C     LR(1) SYNTAX-ANALYZER FOR 'GRAMMAR'  A N D  'SOURCE_TEXT'
C     GF 16.07.1980
C     GF 08.11.1980: BREAK FOR PANIC-MODE AND 'SECOND'-LOGIC
C     GF 28.12.1980: 'REAL REAL'-PROBLEM, POSSIBLE SYMBOLS
C
      INCLUDE 'PARS.F'
      INCLUDE 'ITES.F'
      INCLUDE 'PROS.F'
      INCLUDE 'STAS.F'
      INCLUDE 'STKS.F'
      INCLUDE 'SYMS.F'
      INCLUDE 'TRAS.F'
      INTEGER*2 PARASK
      INTEGER*2 I
     = ,ACT     ! -> 'TRA'-ELEMENT WITH THE NEXT (TERMINAL) SYMBOL
     = ,ACTION  ! RESULT OF 'DELTA': SHIFT/REDUCE/ACCEPT/ERROR
     = ,CLASS   ! FROM 'TRASYM', WHICH CLASS OF SYMBOL
     = ,ERRNO   ! NUMBER OF SYNTACTICAL ERRORS DIAGNOSED
     = ,LEFT    ! RESULTING LEFT SIDE AFTER THE REDUCTION
     = ,PROD    ! = 'SUCPRO' FOR A REDUCTION
     = ,REIPOS  ! >0 (=0) IF RE-INPUT WAS (NOT) SPECIFIED IN 'PROD'
     = ,SECOND  ! = 0 (1) IF '2004' IS REACHED FOR THE 1ST (2ND) TIME
     = ,STATE   ! THE CURRENT STATE OF THE DPDA
     = ,SUCPRO  ! RESULT OF 'DELTA': SUCCESSOR OR PRODUCTION
     = ,SYMBOL  ! THE NEXT TERMINAL TO BE SHIFTED OR LOOKED AT
     = ,TRAIN   ! -> RING WHICH CONTAINS THE REMAINING INPUT STRING
     = ,TRALEF  ! RESULT OF 'TRAFOR', -> RING FOR THE SONS OF 'LEFT'
      INCLUDE 'ENDS.F'
C
C     INITIALIZATION
C
        ERRNO = 0
        FSTK = 2  ! 1 IS RESERVED
      STKSYM(FSTK - 1) = EOSTMT ! FORCE BREAK IN PANIC-MODE
        I = FSYM - 1
        DO 15 SYMBOL = 2,I
          SYMMAR(SYMBOL) = 0 ! NO ACCU OR ATTRIBUTE
15      CONTINUE
        CALL LILINK (TRAHIB,TRA   ,  FTRA)
        DO 16 I = 1,TRAHIB
          TRASYM(I) = 0
          TRAENT(I) = 0
16      CONTINUE
        TRA(TRAHIB-1) = FTRA  ! FREE   R I N G
        TRAIN = TRAHIB
        CALL TRAPIM (TRAIN,TKEYW,EOFILE)
        STATE = STATE2 ! START-STATE FOR THE DPDA
C
C       GET NEXT SYMBOL FROM THE INPUT-STRING
C
1990  CONTINUE ! NEXTER:
        IF (TRA(TRAIN) .NE. TRAIN) GOTO 1 ! INPUT IS EMPTY
          CALL SCANS (TRAIN) ! READ A STATEMENT, CARE FOR KEYWORDS
1       CONTINUE
        ACT = TRA(TRAIN) ! -> 1ST SYMBOL IN INPUT
        CLASS = TRASYM(ACT)
        IF (CLASS .GE. TCOMT) GOTO 2
          IF (CLASS .EQ. TCALL) GOTO 13
            SYMBOL = TRAENT(ACT) ! FOR 'CLASS=TKEYW,TCALL...'
          GOTO 14
13        CONTINUE
            SUCPRO = STATE
            GOTO 2001 ! SHIFT 'TCALL'
14        CONTINUE
        GOTO 3
2       CONTINUE ! CLASS = TCOMT,TGOTO,TIDEN,TNUMB,TSTRI
          SYMBOL = CLASS
3       CONTINUE
C
C
C       DETERMINE NEXT PARSER ACTION DEPENDING ON 'STATE' AND 'SYMBOL'
C
        SECOND = 0 ! ERROR IS ACCESSED FOR THE FIRST TIME
1991  CONTINUE ! GETMAT:
        IF (PARASK('PARSER',1,6,0) .EQ. 0) GOTO 11
          CALL ZZWC('GETMAT: ',1,8,0)
          CALL PUTSYM (SYMBOL)
          CALL PUTSYM (TRAENT(ACT))
          CALL ZZWS (0)
11      CONTINUE
        STKSTA(FSTK) = STATE ! USEFUL FOR SHIFT AND REDUCE, LNG 0
        STKSYM(FSTK) = SYMBOL
        IF (FSTK .GE. STKHIB) GOTO 4
          FSTK = FSTK + 1
        GOTO 5
4       CONTINUE
          CALL ASSERT (38,STKHIB,0)
5       CONTINUE
        CALL DELTA (STATE,SYMBOL,  ACTION,SUCPRO)
C
C       SWITCH DEPENDING ON THE ACTION
C
1992  CONTINUE ! SWITCH
        GOTO (2001,2002,2003,2004), ACTION
C
C       SHIFT THE SYMBOL
C
2001  CONTINUE ! SHIFT
        STATE = SUCPRO
        STKTRA(FSTK - 1) = ACT ! 'FSTK' IS ALREADY INCREMENTED
        TRA(TRAIN) = TRA(ACT) ! READ 'ACT' OFF
        TRA(ACT) = ACT ! MAKE A RING
        GOTO 1990 ! NEXTER
C
C     REDUCE ACCORDING TO A PRODUCTION, DO THE TRANSFORMATION
C
2002  CONTINUE
        PROD = SUCPRO
        FSTK = FSTK - 1 - PROLNG(PROD) ! FOR '-1' SEE 'GETMAT'
        REIPOS = 0 ! ASSUME "NO RE-INPUT"
        LEFT = PROLEF(PROD) ! CARE FOR 'EOS' WITHOUT 'UNCH'
        TRALEF = TRAHIB
        CALL TRAFOR (PROD,TRAIN,  REIPOS,LEFT,TRALEF) ! TRANSFORM
        IF (REIPOS .EQ. 0) GOTO 7 ! RE-INPUT WAS SPECIFIED
          FSTK = FSTK + REIPOS - 1 ! SURELY 'FSTK < STKHIB'
          STATE = STKSTA(FSTK)
          GOTO 1990 ! NEXTER
7       CONTINUE
        STATE = STKSTA(FSTK)
        STKSYM(FSTK) = LEFT
        IF (FSTK .GE. STKHIB) GOTO 9
          FSTK = FSTK + 1
        GOTO 10
9       CONTINUE
          CALL ASSERT (38,STKHIB,0)
10      CONTINUE
C       NOW SHIFT THE LEFT SIDE
        CALL DELTA (STATE,LEFT,  ACTION,SUCPRO)
        IF (ACTION .EQ. SHIFT) GOTO 8
          CALL ASSERT (39,STATE,-LEFT)
C           IN STATE @ LEFT SIDE @ NOT SHIFTED
8       CONTINUE
        STKTRA(FSTK-1) = TRALEF
        STATE = SUCPRO
        SECOND = 0
        GOTO 1991 ! GETMAT:
C
C       PROCESS A SYNTACTICAL ERROR
C
2004  CONTINUE
        IF (SECOND .EQ. 1 .OR. TRASYM(ACT) .NE. TKEYW) GOTO 12
C         TRY IDENTIFIER INSTEAD OF KEYWORD
          SECOND = 1
          SYMBOL = TIDEN
          TRASYM(ACT) = TIDEN ! REPLACE KEYWORD BY IDENTIFIER
          FSTK = FSTK - 1 ! 'GETMAT' INCREMENTED ALREADY
          GOTO 1991 ! SWITCH
12      CONTINUE
        ERRNO = ERRNO + 1
        I = SYMBOL
        IF (I .EQ. TIDEN) I = TRAENT(ACT)
        CALL ASSERT (148, - STKSYM(FSTK-2), - I)
        IF (SYMBOL .EQ. EOFILE .OR. ERRNO .GT. 64) GOTO 2003 ! ACCEPT
C
C         ERROR-RECOVERY WITH PANIC-MODE
C
C         1. THROW ALL IN INPUT UP TO AND INCLUDING 'EOSTMT'
17        CONTINUE
            TRA(TRAIN) = TRA(ACT)
            TRA(ACT) = ACT
            CALL TRAPEN (FTRA,ACT)
            IF (TRA(TRAIN) .NE. TRAIN) GOTO 18
              CALL SCANS (TRAIN)
18          CONTINUE
          IF (TRAENT(ACT) .EQ. EOSTMT
     =      .OR. TRAENT(ACT) .EQ. EOFILE
     =    ) GOTO 19
            ACT = TRA(TRAIN)
            GOTO 17
19        CONTINUE
C
C         2. THROW ALL IN STACK UNTIL A STATE WHICH
C            IS REACHED BY 'EOSTMT'
          FSTK = FSTK - 1 ! SEE GETMAT
20        CONTINUE
            FSTK = FSTK - 1 ! THROW THE ERROR-STATE
          IF (STKSYM(FSTK) .EQ. EOSTMT) GOTO 21
            CALL TRAPEN (FTRA,STKTRA(FSTK))
            GOTO 20
21        CONTINUE
          FSTK = FSTK + 1
          STATE = STKSTA(FSTK)
        IF (PARASK('PARSER',1,6,0) .EQ. 0) GOTO 22
          CALL ASSERT (154,FSTK,STATE)
22      CONTINUE
          GOTO 1990 ! NEXTER
C
C       THE PARSE IS COMPLETE, ACCEPT THE SENTENCE
C
2003  CONTINUE ! ACCEPT:
        TRA(TRAIN) = TRA(ACT) ! READ 'EOFILE' OFF
        TRA(ACT) = ACT
        CALL TRAPEN (FTRA,ACT)
        CALL ASSERT (42,ERRNO,0)
C         PARSE IS COMPLETE, @ ERRORS
C
      RETURN
      END
