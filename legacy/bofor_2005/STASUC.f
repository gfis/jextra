      SUBROUTINE STASUC
C     (RE)COMPUTE THE SUCCESSORS OF A STATE
C     ONLY FOR THOSE SYMBOLS THAT HAVE 'ITESUC .GE. 0'
C     GF 09.07.1980
C
      INCLUDE 'PARS.f'
      INCLUDE 'ITES.f'
      INCLUDE 'PROS.f'
      INCLUDE 'SETS.f'
      INCLUDE 'STAS.f'
      INCLUDE 'SYMS.f'
      INTEGER*2 I
     = ,GOT     ! RESULT OF 'ITEMA1/2', =1 IF STATE WAS READ
     = ,ITEM     ! ITEM CURRENTLY INSPECTED
     = ,ITEMA    ! FIRST ITEM WITH SYMBOL'SYMA'
     = ,ITEMEX   ! FOR 'ITEINS'
     = ,POSIT
     = ,PRODZ    ! THE PRODUCTION FOUND,CALLS OF 'ALONG'
     = ,STATEA   ! RECOMPUTE THE SUCCESSORS OF THIS STATE
     = ,STATEB   ! ASSUME A NEW STATE AND CREATE 'STATEB'
     = ,STATEC   ! THE OLD SUCCESSOR FOR 'SYMA' , OR 0
     = ,STATED   ! THE STATE THAT IS FOUND INSTEAD OF 'STATEB'
     = ,STATEZ   ! THE STATE REACHED,CALLS OF 'ALONG'
     = ,SYMA     ! CURRENT MARKED SYMBOL
     = ,SYMEX    ! FOR 'ITEINS'
     = ,TEMP
C
1     IF(STASUH .EQ. STASUT) GOTO 2
        CALL SETPOP(STAMAR,STATEA,STASUH,STASUB)
        CALL ITEMA2 (STATEA,  ITEM,ITEM,GOT)
CXML
C       XML2 (stasuc, statea, item);
        CALL XML2 ('STASUC', 1, 6, STATEA,ITEM)
        ITEMA = ITEM
        SYMA = ITESYM(ITEMA)!
4       IF(ITEM .GE. ITEHIB) GOTO 5
          IF (ITESYM(ITEM) .LE. 1) GOTO 6 ! NO DUMMY SYMBOL
          STATEC = ITESUC(ITEM)
          STATED = STAHIB
8         IF(ITESYM(ITEM) .NE. SYMA .OR. ITEACT(ITEM) .NE. SHIFT) GOTO 7
            STATEB = ITESUC(ITEM)
            IF (STATEB .GT. STATEC) STATEC = STATEB ! MAX
            IF (STATEB .LT. STATED) STATED = STATEB ! MIN
            ITEM = ITE(ITEM)
          GOTO 8
7         CONTINUE
          IF (STATED .GT. 0) STATEC = - STATEC
          ITEM = ITEMA
          IF (STATEC .LT. 0) GOTO 9 ! THIS SUCCESSOR MUST BE RECOMPUTED
            CALL STAALL(STATEB,SYMA) ! ALLOCATE A NEW STATE
            IF (STATEC .LE. 0) GOTO 10 ! THERE WAS A SUCCESSOR BEFORE
              CALL PREDEL(STATEA,STATEC) ! PRE(STATEC) -= STATEA
10          CONTINUE ! SUCCESSOR EXISTED
            ! STACLH = STACLT
12          IF(ITESYM(ITEM) .NE. SYMA .OR. ITEACT(ITEM) .NE. SHIFT)
     =      GOTO 11
              POSIT = ITEPOS(ITEM) + 1
              IF (ITESUC(ITEM) .EQ. 0) GOTO 13 ! OLD ITEM
                CALL ALONG(STATEC,POSIT,STATEZ,PRODZ)
                IF (STATEZ .GT. 0)
     =            CALL LADEL(0,STATEZ,PRODZ)
13            CONTINUE ! SUCCESSOR EXISTED
              ITESUC(ITEM) = STATEB ! ASSUME A NEW STATE
              CALL ITEINS(STATEB,POSIT,SYMEX,ITEMEX)
              IF (SYMEX .GT. 1)
     =          CALL SEPUSH(SYMMAR,SYMEX,STACLT,STACLB)
              ITEM = ITE(ITEM)
            GOTO 12
11          CONTINUE ! WHILE SYMA , ->
C
            STATED = STATEB
            CALL STASEA(STATEB,0,ITEMA)
C           ! LOOK FOR A STATE WITH THE SAME NUCL.
            CALL PREINS(STATEA,STATEB)
            IF (STATEB .NE. STATED) GOTO 15 ! REALLY A NEW SUCCESSOR
              CALL STACLO(STATEB)
              ITE(1) = STAITE(STATEB)
              TEMP = 1
              CALL ITEMA9 (STATEB,TEMP) ! 'GOT' BY 'STAALL'
            GOTO 16 ! NEW
15          CONTINUE ! OLD 'STATEB' FOUND
              CALL SETFRE(SYMMAR,STACLH,STACLT,STACLB)
              CALL STAFRE(STATED)
              CALL SEPUSH(STAMAR,STATEB,LAPUTT,LAPUTB)
              I = ITEMA
17            IF(I .EQ. ITEM) GOTO 18 ! RECTIFY 'ITESUC'
                ITESUC(I) = STATEB
                TEMP = ITEPOS(I) + 1
                CALL ALONG(STATEB,TEMP,  STATEZ,PRODZ)
                IF (STATEZ .LE. 0) GOTO 19
                  POSIT = PROMON(PRODZ) + PROLNG(PRODZ)
                  CALL ITEINS(STATEZ,POSIT,SYMEX,ITEMEX)
19              CONTINUE
                I = ITE(I)
              GOTO 17
18            CONTINUE ! ALL SHIFT-ITEMS
16          CONTINUE ! OLD SUCCESSOR
9         CONTINUE ! STATEC .LT. 0
6         CONTINUE ! NO DUMMY SYMBOL
20        IF(ITESYM(ITEM) .NE. SYMA) GOTO 21 ! SKIP REDUCE ITEMS
            ITEM = ITE(ITEM)
          GOTO 20
21        CONTINUE ! SKIP REDUCE
          ITEMA = ITEM
          SYMA = ITESYM(ITEMA)!
        GOTO 4
5       CONTINUE ! ALL ITEMS
        ITE(1) = STAITE(STATEA)
        CALL ITEMA9 (STATEA,GOT)
      GOTO 1
2     CONTINUE ! ALL ELEMENTS OF 'STASUC'-QUEUE
      RETURN! STASUC
      END
