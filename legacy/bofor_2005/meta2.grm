/*------------------------------------------------------*/
/* META-GRAMMAR FOR PARSING OF TRANSFORMATION GRAMMARS  */
/* GEORG FISCHER JULY 20, 1980                          */
/*------------------------------------------------------*/
EOF IDENTIFIER NUMBER STRING ; /* END OF STATEMENT */
[AXIOM = EXTRA_INPUT
.EXTRA_INPUT  = '[' GRAMMAR ']' SOURCE_TEXT   => #1
              | EXTRA_INPUT
                '[' GRAMMAR ']' SOURCE_TEXT   => #1
.GRAMMAR      = RULES                         => #2
.RULES        = RULE
              | RULES '..' RULE
.RULE         = LEFT_SIDE '=' RIGHT_SIDES
.LEFT_SIDE    = IDENTIFIER                    => #3
.RIGHT_SIDES  = RIGHT_SIDE
              | RIGHT_SIDES '|' RIGHT_SIDE
.RIGHT_SIDE   = SYNTAX_PART SEMANTIC_PART
.SYNTAX_PART  = MEMBERETIES                   => #6
.SOURCE_TEXT  =
.MEMBERETIES  =                               => #7
              | MEMBERETIES MEMBER
.MEMBER       = PRIMARY
.PRIMARY      = IDENTIFIER                    => #8
              | STRING                        => #9
              | NUMBER                        => #8
.SEMANTIC_PART= TRANSFORMATIONS               => #11
.TRANSFORMATIONS=                             => #12
              | '=>' TRANSFORMATION           => #13
              | TRANSFORMATIONS '->' TRANSFORMATION
                                              => #14
.TRANSFORMATION = DESTINATION
              | TRANSFORMATION ELEMENT        => #16
.DESTINATION  = '='                           => #17
              | ELEMENT                       => #18
	      	  | SYMBOL '='                    => #19
.ELEMENT      = SYMBOL                        => #20
              | '#' NUMBER                    => #21
	          | NUMBER                        => #22
              | STRING                        => #23
              | '@'                           => #24
              | SYMBOL '(' COMBINED_LIST ')'  => #25
.SYMBOL       = INCARNATION
              | INCARNATION '$' IDENTIFIER    => #27
.INCARNATION  = IDENTIFIER                    => #28
              | IDENTIFIER ':' NUMBER         => #29
.COMBINED_LIST=                               => #30
              | COMBINED_LIST SYMBOL
              | COMBINED_LIST NUMBER          => #32
              | COMBINED_LIST STRING          => #33
              | COMBINED_LIST '#' NUMBER      => #34
]
 /*--------------------------------------------------------------*/
 /*  METAGRAMMATIK FUER GRAMMATIKEN                              */
 /*--------------------------------------------------------------*/
 EOF IDENTIFIER NUMBER STRING ;
 [AXIOM          = PROGRAM
 .PROGRAM        = '[' SYNTAX ']' STATEMENTS              => #1
                 | PROGRAM '[' SYNTAX ']' STATEMENTS      => #1
 .SYNTAX         = RULES                                  => #2
 .LEFT_SIDE      = IDENTIFIER                             => #3
 .RULES          = RULE
                 | RULES '.' RULE
 .RULE           = LEFT_SIDE '=' RIGHT_SIDES              => #4
                 | LEFT_SIDE '-' RIGHT_SIDES              => #5
 .RIGHT_SIDES    = RIGHT_SIDE
                 | RIGHT_SIDES '|' RIGHT_SIDE
 .RIGHT_SIDE     = SYNTAX_PART SEMANTIC_PART
 .SYNTAX_PART    = MEMBERETIES                            => #6
 .STATEMENTS     =
 .MEMBERETIES    =                                        => #7
                 | MEMBERETIES MEMBER
 .MEMBER         = PRIMARY
 .PRIMARY        = IDENTIFIER                             => #8
                 | STRING                                 => #9
                 | NUMBER                                 => #8
 .SEMANTIC_PART  = TRANSLATIONETY GENERATIONETIES         => #10
 .TRANSLATIONETY =                                        => #11
                 | '=>' ELEMENTETIES                      => #12
 .ELEMENTETIES   =                                        => #13
                 | ELEMENTS
 .ELEMENTS       = ELEMENT
                 | ELEMENTS ELEMENT
 .ELEMENT        = STRING                                 => #14
                 | IDENTIFIER                             => #15
                 | NUMBER                                 => #16
                 | IDENTIFIER ':' NUMBER                  => #17
                 | '#' NUMBER                             => #18
                 | '@'                                    => #19
                 | '%' NUMBER                             => #20
                 | COMBINED_SYMBOL COMBINED_ELEM
 .COMBINED_SYMBOL= IDENTIFIER                             => #21
 .COMBINED_ELEM  = '(' ELEMENTS ')'                       => #22
 .GENERATIONETIES=
                 | GENERATIONETIES GENERATION
 .GENERATION     = '->' ACCUMULATOR '=' ELEMENTETIES      => #23
 .ACCUMULATOR    =                                        => #24
                 | IDENTIFIER                             => #25
 .
 ]
 
 [
   /*------------------------------------------------*/
   /*            EXPLI  --->  FORTRAN                */
   /*------------------------------------------------*/
    
  /*--------------------------------------------*/
  /*          OVERHEAD                          */
  /*--------------------------------------------*/
     
 STATEMENTS =                 -> PROC_ACCU = 
                              -> LAB1 = #26 -> LAB2 = #26
            | STATEMENTS PROC_STMT 
           => STATEMENTS PROC_STMT PROC_ACCU
 .PROC_NAME    =  PROCEDURE
               |  PROC
       
  /*---------------------------------------------*/
  /*           PL1 - STATEMENTS                  */
  /*---------------------------------------------*/
     
 .STMTS        =  
               |  STMTS STMT
 .STMT         =  PROC_STMT
               => 
               -> PROC_ACCU = PROC_ACCU PROC_STMT
               |  SIMPLE_STMT
               |  CONDITIONAL_STMT
 .SIMPLE_STMT  =  ASSIGNMENT_STMT
               |  CALL_STMT
               |  DO_GROUP
               |  DECLARE_STMT
               |  GOTO_STMT
               |  INCLUDE_STMT
               |  IO_STMT
               |  LABEL_STMT 
               |  TO_LOOP
               |  WHILE_GROUP
               |  ';'
               =>
 .SIM_COND_STMTS    =  SIM_COND_STMT
                    |  SIM_COND_STMTS SIM_COND_STMT
 .SIM_COND_STMT     =  SIMPLE_STMT
                    |  CONDITIONAL_STMT
       
  /*-----------------------------------------*/
  /*      PROCEDURE - STATEMENT              */
  /*-----------------------------------------*/
      
 .PROC_STMT    =  PROC_HEAD STMTS PROC_END
 .PROC_HEAD    =  IDENTIFIER ':' PROC_NAME PARA_LIST ';'
               => %7 SUBROUTINE IDENTIFIER PARA_LIST
               -> RETURN_AC = RETURN
               |  IDENTIFIER ':' PROC_NAME PARA_LIST RETURNS
                  '(' BIN FIXED ')' ';'
               => %7 INTEGER FUNCTION IDENTIFIER PARA_LIST
               -> RETURN_AC = RETURN
               |  IDENTIFIER ':' PROC_NAME PARA_LIST
                    OPTIONS '(' MAIN ')' ';'
               => %7 PROGRAM IDENTIFIER PARA_LIST
               -> RETURN_AC = STOP
 .PROC_END     =  END IDENTIFIER ';'
               => %7 RETURN_AC %7 END
 .PARA_LIST    = 
               |  '(' IDF_LIST ')'
 .IDF_LIST     = IDENTIFIER 
               | IDF_LIST ',' IDENTIFIER
    
  /*------------------------------------------*/
  /*           ASSIGNMENT - STATEMENT         */
  /*------------------------------------------*/
     
 .ASSIGNMENT_STMT  =  VARIABLE '=' EXPRESSION ';'
                   => %7 VARIABLE '=' EXPRESSION
    
  /*------------------------------------------*/
  /*       CALL - STATEMENT                   */
  /*------------------------------------------*/
    
 .CALL_STMT        =  CALL IDENTIFIER CALL_LIST ';'
                   => %7 CALL IDENTIFIER CALL_LIST
 .CALL_LIST        =
                   | '(' CALL_LISTETY ')'
 .CALL_LISTETY     = EXPRESSION
                   | CALL_LISTETY ',' EXPRESSION
    
  /*------------------------------------------*/
  /*     CONDITIONAL - STATEMENT              */
  /*------------------------------------------*/
    
 .CONDITIONAL_STMT  =  IF LOG_EXPR THEN SIMPLE_STMT
                    => %7 IF ' (.' NOT ' .(' LOG_EXPR ' ))' GOTO LAB1
                       SIMPLE_STMT
                       %1 LAB1  %7 CONTINUE
                    -> LAB1 = LAB2
                    -> LAB2 = #26
              
                    |  IF LOG_EXPR THEN SIMPLE_STMT
                                   ELSE SIMPLE_STMT
                    => %7 IF ' (.' NOT ' .(' LOG_EXPR ' ))' GOTO LAB1
                       SIMPLE_STMT:1
                       %7 GOTO LAB2
                       %1 LAB1  %7 CONTINUE
                       SIMPLE_STMT:2
                       %1 LAB2 %7 CONTINUE
                    -> LAB1 = #26
                    -> LAB2 = #26
     
  /*-------------------------------------------*/
  /*          DO - GROUP                       */
  /*-------------------------------------------*/
    
 .DO_GROUP      =  DO ';' SIM_COND_STMTS END ';'
                => SIM_COND_STMTS
    
  /*-------------------------------------------*/
  /*          GOTO_STMT                        */
  /*-------------------------------------------*/
      
 .GOTO_STMT    =  GOTO IDENTIFIER ';'
               => %7 GOTO IDENTIFIER #28
      
               |  GOTO IDENTIFIER '(' EXPRESSION ')' ';'
               => %7 ACCU_IDF '=' EXPRESSION
                  %7 GOTO '(' ACCU_CASE ')' ',' ACCU_IDF
     
  /*-------------------------------------------*/
  /*         INCLUDE - STATEMENT               */
  /*-------------------------------------------*/
    
 .INCLUDE_STMT   =  '%' INCLUDE IDENTIFIER ';'  
                 => %7 '%' INCLUDE IDENTIFIER  
     
  /*-------------------------------------------*/
  /*          LABEL - STATEMENT                */
  /*-------------------------------------------*/
    
 .LABEL_STMT     =  IDENTIFIER ':'
                 => %1 IDENTIFIER #28 %7 CONTINUE
     
  /*-------------------------------------------*/
  /*          TO - LOOP                        */
  /*-------------------------------------------*/
    
 .TO_LOOP     =  DO VARIABLE '=' EXPRESSION TO EXPRESSION ';'
                 SIM_COND_STMTS
                 END ';'
              => %7 VARIABLE '=' EXPRESSION:1
                 %1 LAB1 %7 IF '(' VARIABLE '.' GT '.' EXPRESSION:2 ')'
                                                     GOTO LAB2
                 SIM_COND_STMTS
                 %7 VARIABLE '=' 1 '+' VARIABLE
                 %7 GOTO LAB1
                 %1 LAB2 %7 CONTINUE
              -> LAB1 = #26
              -> LAB2 = #26
             
              |  DO VARIABLE '=' EXPRESSION TO EXPRESSION
                                            BY '-' 1 ';'
                 SIM_COND_STMTS
                 END ';'
              => %7 VARIABLE '=' EXPRESSION:1
                 %1 LAB1 %7 IF '(' VARIABLE '.' LT '.' EXPRESSION2 ')'
                                                     GOTO LAB2
                 SIM_COND_STMTS
                 %7 VARIABLE '=' VARIABLE '-' 1
                 %7 GOTO LAB1
                 %1 LAB2 %7 CONTINUE
              -> LAB1 = #26 
              -> LAB2 = #26
    
  /*--------------------------------------*/
  /*     WHILE - GROUP                    */
  /*--------------------------------------*/
    
 .WHILE_GROUP  =  DO WHILE '(' LOG_EXPR ')' ';'
                  SIM_COND_STMTS
                  END ';'
               => %1 LAB1 %7 IF '(' '.' NOT '.' '(' LOG_EXPR ' ))' GOTO LAB2
                  SIM_COND_STMTS
                  %7 GOTO LAB1
                  %1 LAB2 %7 CONTINUE
               -> LAB1 = #26
               -> LAB2 = #26
          
  /*----------------------------------------------*/
  /*      DECLARE - STATEMENT                     */
  /*----------------------------------------------*/
    
 .DECLARE_STMT  =  ENTRY_DECLARE
                |  EXTERNAL_DECLARE
                |  PARENTH_DECLARE
 .ENTRY_DECLARE =  DCL_NAME IDENTIFIER ENTRY ';'
                =>  %7 EXTERNAL IDENTIFIER
                |  DCL_NAME IDENTIFIER ENTRY '(' TYPE_LIST ')' ';'
                =>  %7 EXTERNAL IDENTIFIER
                |  DCL_NAME IDENTIFIER ENTRY '(' TYPE_LIST ')'
                                      RETURNS '(' BIN FIXED ')' ';'
                =>  %7 EXTERNAL IDENTIFIER
 .TYPE_LIST     =  TYPE
                |  TYPE_LIST ',' TYPE
 .TYPE          =  BIN FIXED
                |  CHAR '(' NUMBER ')'
                |  CHAR '(' '*' ')'
 .DCL_NAME      =  DECLARE
                |  DCL
     
 .EXTERNAL_DECLARE  =  DCL_NAME NUMBER IDENTIFIER EXTERNAL ','
                          NUMBER  SPEC_DECLARE  ';'
                    => %7 COMMON '/' IDENTIFIER '/' SPEC_DECLARE
 .SPEC_DECLARE      =  DECLARATIONS
                    => @ 'EXTDCL' DECLARATIONS
                    |  'EXTDCL' EXTDECLARES
                    => EXTDECLARES
 .EXTDECLARES       =  EXTDECLARE
                    |  EXTDECLARES ',' EXTDECLARE
 .EXTDECLARE        =  IDENTIFIER '(' NUMB ')' BIN FIXED
                    => IDENTIFIER '(' NUMB ')'
                    |  IDENTIFIER BIN FIXED
                    => IDENTIFIER
     
  /*-------------------------------------------*/
  /*      RESOLUTION OF PARENTHESIS            */
  /*-------------------------------------------*/
   
 .PARENTH_DECLARE     =   DCL_NAME DECLARATIONS ';'
                  => @'NEWDCL' DECLARATIONS ';'
               |'NEWDCL' NEWDECLARATIONS ';'
                     => %7 NEWDECLARATIONS 
 .DECLARATIONS = DECLARATION
               | DECLARATIONS ','   DECLARATION
 .DECLARATION  = IDENTIFIER  ATTRIBUTES
               | '(' DCL_LIST  => @ DCL_LIST  ->  = ACCU
 .ATTRIBUTES   = ATTRIBUTE
               | ATTRIBUTES ATTRIBUTE
 .DCL_LIST     = DCL_ELEMENT ')' ATTRIBUTES
                  =>    DCL_ELEMENT ATTRIBUTES
                  -> ACCU =  ATTRIBUTES
               | DCL_ELEMENT ',' DCL_LIST
                  =>  DCL_ELEMENT ACCU  ',' DCL_LIST
                  -> ACCU = ACCU
 .DCL_ELEMENT  = IDENTIFIER  
               | DECLARATION
 .ATTRIBUTE    = BIN FIXED
               | CHAR '(' NUMBER ')'
               | CHAR '(' '*' ')'
               | DECIMAL FLOAT
               | LABEL
               | STATIC  =>
               | INIT
               | '(' MIXED_LIST ')'
 .MIXED_LIST   = MIXED_ELEMENT
               | MIXED_LIST ',' MIXED_ELEMENT
 .MIXED_ELEMENT= DECIMAL_CONSTANT
               | IDENTIFIER  => IDENTIFIER ( IDENTIFIER #28 )
      
  /*----------------------------------------*/
  /*    TRANSLATION OF DECLARATION          */
  /*----------------------------------------*/
  
 .NEWDECLARATIONS      = NEWDECLARATION
                       | NEWDECLARATIONS ',' NEWDECLARATION
                         => NEWDECLARATIONS %7 NEWDECLARATION
 .NEWDECLARATION       = NUMBER_DECLARATION
                       | LABEL_DECLARATION
 .NUMBER_DECLARATION   = IDENTIFIER DIMENSION NUMBER_ATTRIBUTE
                       => NUMBER_ATTRIBUTE IDENTIFIER  DIMENSION
                       | IDENTIFIER DIMENSION NUMBER_ATTRIBUTE INIT
                         '(' NUMBER_LIST ')'
                       => NUMBER_ATTRIBUTE IDENTIFIER  DIMENSION
                          %7 DATA IDENTIFIER '/' NUMBER_LIST '/'
 .DIMENSION            =
                       | '(' NUMB ')'
 .NUMBER_ATTRIBUTE = BIN FIXED     => INTEGER 
                   | DECIMAL FLOAT     => REAL 
                   | CHAR '(' NUMBER ')' => CHARACTER '*' NUMBER
                   | CHAR '(' '*'    ')' => CHARACTER '*' '(' '*' ')'
 .NUMBER_LIST          = DECIMAL_NUMBER
                       | NUMBER_LIST ',' DECIMAL_NUMBER
 .LABEL_DECLARATION    = IDENTIFIER  '(' NUMB ')' LABEL INIT '(' LABEL_LIST ')'
                       =>      -> ACCU_CASE = LABEL_LIST  -> ACCU_IDF = #27
 .LABEL_LIST           = IDENTIFIER
                       | LABEL_LIST ',' IDENTIFIER
  /*-------------------------------------------*/
  /*      EXPRESSION                           */
  /*-------------------------------------------*/
 .LOG_EXPR                  = EXPRESSION_SEVEN
                            | LOG_EXPR '|' EXPRESSION_SEVEN
                            => '(' LOG_EXPR ')' '.' OR '.'
                              '(' EXPRESSION_SEVEN ')'
 .EXPRESSION_SEVEN          = EXPRESSION_SIX
                            | EXPRESSION_SEVEN '&' EXPRESSION_SIX
                            => EXPRESSION_SEVEN '.' AND '.' EXPRESSION_SIX
 .EXPRESSION_SIX            = EXPRESSION_FIVE
                            | EXPRESSION_SIX COMPARISON_OPERATOR EXPRESSION_FIVE
 .COMPARISON_OPERATOR       = '>'  => '.' GT '.'
                            | '>='  => '.' GE '.'  
                            | '='  => '.' EQ '.'
                            | '<='  => '.' LE '.'
                            | ' >'  => '.' LE '.'
                            | ' ='  => '.' NE '.'
                            | ' <'  => '.' GE '.'
                            | '<'  =>  '.' LT '.'
  
 .EXPRESSION                = EXPRESSION_FIVE
 .EXPRESSION_FIVE           = EXPRESSION_FOUR
                            | EXPRESSION_FIVE '||' EXPRESSION_FOUR
                           => EXPRESSION_FIVE '//' EXPRESSION_FOUR
 .EXPRESSION_FOUR           = EXPRESSION_THREE
                            | EXPRESSION_FOUR '+' EXPRESSION_THREE
                            | EXPRESSION_FOUR '-' EXPRESSION_THREE
 .EXPRESSION_THREE          = EXPRESSION_TWO
                            | EXPRESSION_THREE '*' EXPRESSION_TWO
                            | EXPRESSION_THREE '/' EXPRESSION_TWO
  
 .EXPRESSION_TWO            = PRIMITIVE_EXPRESSION
                            | PREFIX_EXPRESSION
                            | PARENTHESIZED_EXPRESSION
                            | EXPRESSION_ONE
 .EXPRESSION_ONE            = PRIMITIVE_EXPRESSION '**' EXPRESSION_TWO
                            | PARENTHESIZED_EXPRESSION '**' EXPRESSION_TWO
 .PREFIX_EXPRESSION         = PREFIX_OPERATOR EXPRESSION_TWO
 .PREFIX_OPERATOR           = '+'
                            | '-'
                            | ' '   => '.'  NOT '.' 
 .PARENTHESIZED_EXPRESSION  = '(' EXPRESSION ')'
 .PRIMITIVE_EXPRESSION      = VARIABLE
                            | DECIMAL_CONSTANT
                            | HBOUND '(' IDENTIFIER ',' 1 ')'
           => '???' HBOUND '(' VARIABLE ',' 1 ')'
                            | MOD  '(' EXPRESSION ',' EXPRESSION ')'
                            | LENGTH '(' VARIABLE ')'
         => LEN '(' VARIABLE ')'
 .DECIMAL_CONSTANT          = DECIMAL_NUMBER
                            | DECIMAL_NUMBER E EXPONENT
 .DECIMAL_NUMBER            = INTEGER
                            | INTEGER '.' INTEGER
                            | '.' INTEGER
 .EXPONENT                  = INTEGER
                            | '+' INTEGER
                            | '-' INTEGER
 .INTEGER                   = NUMB
 .NUMB                      = NUMBER  => NUMB (NUMBER)
  /*-------------------------------------------*/
  /*         IO-STATEMENT                      */
  /*-------------------------------------------*/
 .IO_STMT       = PUT_STATEMENT
 .PUT_STATEMENT      = PUT_BEGIN PUT_END
 .PUT_BEGIN          = PUT_SYMBOL FILE_DESCRIPTION
 .PUT_SYMBOL         = PUT
                       => WRITE
                       -> ACCU_FORTNR = #26
 .FILE_DESCRIPTION   = FILE '(' SYSPRINT ')'
                       => '(' 6 ',' ACCU_FORTNR ')'
                       -> ACCU_FORTNR = ACCU_FORTNR
 .PUT_END            = SKIP
                       => %1 ACCU_FORTNR
                          %7 FORMAT '(' '/1H ' ')'
                     | SKIP '(' 2 ')'
                       => %1 ACCU_FORTNR
                          %7 FORMAT '(' '/1H0' ')'
                     | EDIT '(' VAR_LIST ')' '(' FORMAT_LIST ')'
                          => VAR_LIST %1 ACCU_FORTNR 
                               %7 FORMAT '(' FORMAT_LIST ')'
 .VAR_LIST           = SYMBOL
                     | VAR_LIST ',' SYMBOL
 .SYMBOL             = VARIABLE
                     | STRING
                     | '(' VARIABLE DO IDENTIFIER '=' VARIABLE TO VARIABLE ')'
                  => '(' VARIABLE:1 ',' IDENTIFIER '=' VARIABLE:2 ',' VARIABLE:3
                      ')'
 .FORMAT_LIST        = FORMAT_ELEMENT
                     | FORMAT_LIST ',' FORMAT_ELEMENT
 .FORMAT_ELEMENT     = SKIP
                       => '/1H '
                     | SKIP '(' 2 ')'
                       => '/1H0'
                     | F '(' NUMB   ')'
                       => I NUMB
                     | X '(' NUMB ')'
                       => X NUMB
                     | A '(' NUMB ')'
                       => A NUMB
                     | '(' FORMAT_LIST ')'
                     | NUMBER FORMAT_ELEMENT
 .VARIABLE           = IDENTIFIER
                     | IDENTIFIER '(' VARIABLE_LIST ')'
   | SUBSTR '(' VARIABLE ',' EXPRESSION ')'
   => VARIABLE '(' EXPRESSION:1 ':)'
   | SUBSTR '(' VARIABLE ',' EXPRESSION ',' EXPRESSION ')'
   => VARIABLE '(' EXPRESSION:1 ':' EXPRESSION:1 '+' EXPRESSION:2
                                      '-' 1 ')'
   | UNSPEC '(' VARIABLE ')'
   => '?? UNSPEC(' VARIABLE ')'
 .VARIABLE_LIST      = EXPRESSION
                     | VARIABLE_LIST ',' EXPRESSION
 . 
 ]
  /*-----------------------------*/
  /*    EINGABE                  */
  /*-----------------------------*/
GEHOMA : PROCEDURE OPTIONS (MAIN);
DCL 1 PROS EXTERNAL, 2
    (FPROD , PROHIB , 
     (PRO, PROLNG, PROLEF, PROMON,PROSEM)
      (400) ) BIN FIXED;
DCL GESY ENTRY (BIN FIXED, BIN FIXED, BIN FIXED);
GESY: PROCEDURE (FIRST,NUM,RET);
DCL (FIRST, NUM, RET) BIN FIXED;
 DCL CHAR1 CHAR(1), CHARAS CHAR(*);
% INCLUDE PROS;
RET = PROLNG(PROMON(FIRST + NUM -1) );
END GESY;
NONS : PROCEDURE (FIRST,LAST) RETURNS (BIN FIXED);
DCL (FIRST,LAST) BIN FIXED;
   
TEST: PROCEDURE (ALPHA,CODE);
DCL (ALPHA,CODE) BIN FIXED;
DCL (LEFT DECIMAL FLOAT,(MON,PROD) BIN FIXED) INIT(0);
DCL CASE (3) LABEL INIT (SYN1,SYN2,SYN3);
GOTO CASE (CODE);
SYN1: DO MON = 0 TO ALPHA + 7;
        IF LEFT <= MON 
          THEN
            DO;
            LEFT = LEFT -1;
            PROD = PROD + LEFT * MON;
            END;
          ELSE
            GOTO SYN2;
        GOTO SYN3;
      END;
  
 SYN2: PUT FILE (SYSPRINT) EDIT
          (PROD,ALPHA,BETA) (F(10),F(7),F(3),SKIP);
 SYN3:
 END TEST;
    
 DCL (LOG,LOGO) BIN FIXED INIT (0);
 LAB1: IF LOG = LOGO THEN CALL TEST (FIRST,LAST);
                     ELSE CALL TEST (LAST,FIRST);
 END NONS;
 SUBSTR(SUBSTR(LOGO,1,91),LOGO,17) = SUBSTR(LOGO,3,LENGTH(LOGO));
 DO WHILE (I>0); I= I - 1; END;
 DO I = 17 TO 1 BY -1;
   PUT FILE(SYSPRINT) SKIP(2);
 END;
 END GEHOMA;
  /*------------------------------*/
  /*     UEBERSETZUNG             */
  /*------------------------------*/
