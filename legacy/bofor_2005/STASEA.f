      SUBROUTINE STASEA (STATEB,LIMIT,ITEMA)
C     SEARCH FOR A COMPATIBLE STATE
C     VERSION WITHOUT 'NUCS' DATA STRUCTURE
C     GF 30.07.1980
C
      INCLUDE 'PARS.f'
      INCLUDE 'ITES.f'
      INCLUDE 'PRES.f'
      INCLUDE 'STAS.f'
      INCLUDE 'SYMS.f'
      INTEGER*2 I1,I2
     = ,GOT     ! RESULT OF 'ITEMA1/2', =1 IF STATE WAS READ
     = ,ITEMA   ! -> FIRST ITEM WITH SYMBOL 'SYMA' IN 'STATEA'
     = ,ITEMC   ! -> ... IN 'STATEC'
     = ,LIMIT   ! NOT USED IN THIS VERSION
     = ,PRED    ! -> LIST OF PREDECESSORS OF 'STATED'
     = ,STATEB  ! NEW AND RESULTING STATE
     = ,STATEC  ! A PREDECESSOR OF 'STATED'
     = ,STATED  ! A STATE WHICH IS PERHAPS COMPATIBLE WITH 'STATEB'
     = ,SYMA    ! 'STATEB' AND 'STATED' ARE REACHED BY THIS SYMBOL
C       STATEA    T H E  PREDECESSOR OF 'STATEB'
      INCLUDE 'ENDS.f'
C
      SYMA = ITESYM(ITEMA)
      STATED = SYMRST(SYMA)
1     IF(STATED .EQ. STAHIB) GOTO 2
        PRED = STAPRE(STATED)
        IF (PRED .EQ. PREHIB) GOTO 3
          STATEC = PRESTA(PRED)
          CALL ITEMA1 (STATEC,  ITEMC,GOT)
4         IF(ITESYM(ITEMC) .EQ. SYMA .OR. ITEMC .EQ. ITEHIB) GOTO 5
            ITEMC = ITE(ITEMC)
          GOTO 4
5         CONTINUE ! LOOK FOR 'SYMA'
          I1 = ITEMA
          I2 = ITEMC
6         IF(ITESYM(I1) .NE. SYMA  .OR. ITESYM(I2) .NE. SYMA .OR.
     =       ITEACT(I1) .NE. SHIFT .OR. ITEACT(I2) .NE. SHIFT .OR.
     =       ITEPOS(I1) .NE. ITEPOS(I2)
     =     ) GOTO 7
             I1 = ITE(I1)
             I2 = ITE(I2)
           GOTO 6
7          CONTINUE
          IF ((ITESYM(I1) .EQ. SYMA .AND. ITEACT(I1) .EQ. SHIFT) .OR.
     =        (ITESYM(I2) .EQ. SYMA .AND. ITEACT(I2) .EQ. SHIFT)
     =    ) GOTO 8
            STATEB = STATED
            CALL ITEMA8 (STATEC,GOT)
            RETURN
8         CONTINUE
          CALL ITEMA8 (STATEC,GOT)
3       CONTINUE ! .NE. PREHIB
        STATED = STARST(STATED)
      GOTO 1
2     CONTINUE ! WHILE .NE. STAHIB
      RETURN
      END
